import { NextResponse } from 'next/server'
import Replicate from 'replicate'
import PocketBase from 'pocketbase'

const replicate = new Replicate({
  auth: process.env.REPLICATE_API_TOKEN,
})

const pb = new PocketBase('http://127.0.0.1:8090');

async function streamToString(stream: ReadableStream): Promise<string> {
  const reader = stream.getReader();
  const decoder = new TextDecoder();
  let result = '';

  while (true) {
    const { done, value } = await reader.read();
    if (done) break;
    result += decoder.decode(value, { stream: true });
  }

  return result;
}

export async function POST(req: Request) {
  try {
    const { prompt } = await req.json()
    
    console.log('Starting image generation with prompt:', prompt)

    const output = await replicate.run(
      "stability-ai/sdxl:39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b",
      {
        input: {
          prompt,
          num_outputs: 1,
        }
      }
    )

    console.log('Received output from Replicate:', output)

    let imageUrl: string;
    if (output && output[0] instanceof ReadableStream) {
      const streamContent = await streamToString(output[0]);
      console.log('Stream content type:', typeof streamContent);
      console.log('Stream content preview:', streamContent.slice(0, 100));
      
      if (streamContent.startsWith('http')) {
        imageUrl = streamContent.trim();
      } else {
        throw new Error('Unexpected content in stream');
      }
    } else if (Array.isArray(output) && typeof output[0] === 'string') {
      imageUrl = output[0];
    } else {
      throw new Error('Unexpected output format from Replicate');
    }

    console.log('Extracted image URL:', imageUrl)

    if (!imageUrl || !imageUrl.startsWith('http')) {
      throw new Error('Invalid image URL from Replicate');
    }

    // Save to PocketBase
    try {
      const record = await pb.collection('generated_images').create({
        prompt: prompt,
        image_url: imageUrl
      });
      console.log('Successfully saved to PocketBase:', record);
    } catch (pocketbaseError) {
      console.error('Error saving to PocketBase:', pocketbaseError);
      // Continue execution even if PocketBase save fails
    }

    return NextResponse.json({ imageUrl })
  } catch (error) {
    console.error('Error generating image:', error)
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to generate image. Please try again.' },
      { status: 500 }
    )
  }
}